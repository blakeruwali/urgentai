// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String?
  preferences     Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  conversations   Conversation[]
  projects        Project[]      // New: User's generated projects
  
  @@map("users")
}

model Conversation {
  id            String      @id @default(cuid())
  title         String
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  model         String      @default("claude-3-sonnet")
  temperature   Float?      @default(0.7)
  maxTokens     Int?        @default(4096)
  systemPrompt  String?
  metadata      Json?
  
  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      Message[]
  
  @@map("conversations")
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  role           MessageRole
  content        String
  createdAt      DateTime    @default(now())
  tokens         Int?
  model          String?
  executionTime  Float?
  metadata       Json?
  attachments    Json?
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

model ApiUsage {
  id            String   @id @default(cuid())
  userId        String?
  model         String
  tokensUsed    Int
  cost          Float?
  timestamp     DateTime @default(now())
  endpoint      String?
  
  @@map("api_usage")
}

// ðŸš€ NEW: Project Management Models

model Project {
  id            String      @id @default(cuid())
  name          String
  description   String?
  type          ProjectType @default(REACT)
  templateId    String?
  userId        String
  status        ProjectStatus @default(DRAFT)
  metadata      Json?       // Stores customizations, build info, etc.
  previewUrl    String?     // Live preview URL if available
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  files         ProjectFile[]
  
  @@map("projects")
}

enum ProjectType {
  REACT
  VUE
  NODE
  STATIC
  LANDING_PAGE
  TODO_APP
  DASHBOARD
  BLOG
}

enum ProjectStatus {
  DRAFT
  BUILDING
  READY
  DEPLOYED
  ERROR
}

model ProjectFile {
  id            String      @id @default(cuid())
  projectId     String
  path          String      // e.g., "src/App.tsx", "package.json"
  content       String      // File content stored as text
  type          FileType    @default(CODE)
  size          Int?        // Content size in bytes
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, path]) // Ensure unique file paths per project
  @@map("project_files")
}

enum FileType {
  CODE          // .tsx, .ts, .js
  STYLE         // .css, .scss
  CONFIG        // .json, .yml
  MARKUP        // .html
  DOCUMENTATION // .md
  ASSET         // images, etc.
}

// ðŸš€ NEW: Template Management

model Template {
  id            String      @id @default(cuid())
  name          String
  description   String
  type          ProjectType
  category      String?     // "productivity", "landing", "dashboard"
  version       String      @default("1.0.0")
  isPublic      Boolean     @default(true)
  metadata      Json?       // Template configuration
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  files         TemplateFile[]
  
  @@map("templates")
}

model TemplateFile {
  id            String      @id @default(cuid())
  templateId    String
  path          String
  content       String
  type          FileType    @default(CODE)
  isGenerated   Boolean     @default(false) // True if generated by AI
  
  // Relations
  template      Template    @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@unique([templateId, path])
  @@map("template_files")
}
